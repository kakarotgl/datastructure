package com.kaka.stack;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class PolanNotation {

	public static void main(String[] args) {
		// 先定义逆波兰表达式
		//(3+4)*5-6 =>3 4 + 5 * 6 -
		String suffixExpression = "3 4 + 5 * 6 -";
		//思路
		//1.先将"3 4 + 5 * 6 -" =>放到ArrayList中
		//2.将ArrayList 传递给一个方法，配合栈完成计算
		List<String> rpnList = getListString(suffixExpression);
		//System.out.println(rpnList);
		int res = calculate(rpnList);
		System.out.println("计算的结果是："+res);
	}
	
	//将一个逆波兰表达式，依次将数据和运算符放入到ArrayList中
	public static List<String> getListString(String suffixExpression){
		//将suffixExpression分割
		String[] split = suffixExpression.split(" ");
		List<String> list = new ArrayList<String>();
		for (String item : split) {
			list.add(item);
		}
		return list;
	}
	
	//完成对逆波兰表达式的运算
	public static int calculate(List<String> list) {
		//创建给栈，只需要一个栈即可
		Stack<String> stack = new Stack<String>();
		//遍历ls
		for (String item : list) {
			//这里使用正则表达式来取出数
			if(item.matches("\\d+")) {//匹配的是多位数
				//入栈
				stack.push(item);
			}else {
				//pop出两个数，并运算，再入栈
				int num2 = Integer.parseInt(stack.pop());
				int num1 = Integer.parseInt(stack.pop());
				int res = 0;
				if(item.equals("+")) {
					res = num1 + num2;
				}else if (item.equals("-")) {
					res = num1 - num2;
				}else if (item.equals("*")) {
					res = num1 * num2;
				}else if (item.equals("/")) {
					res = num1 / num2;
				}else {
					throw new RuntimeException("运算符有误");
				}
				//把res入栈
				stack.push(""+res);
			}
		}
		//最后留在stack中的数据是运算结果
		return Integer.parseInt(stack.pop());
	}

}
